--
-- Test orioledb indexes:
-- 1) orioledb_tbl_indices correct only for non-unique secondary indices
-- 2) INSERT works only for non-unique secondary indices
-- create tables with base variations of indexes
-- ctid is primary index
CREATE EXTENSION orioledb;
CREATE TABLE o_test50
(
	key int8 NOT NULL,
	value int8
) USING orioledb;
SELECT orioledb_tbl_indices('o_test50'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 
(1 row)

INSERT INTO o_test50 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
EXPLAIN (COSTS off) SELECT * FROM o_test50 WHERE key BETWEEN 100 and 110;
                QUERY PLAN                 
-------------------------------------------
 Seq Scan on o_test50
   Filter: ((key >= 100) AND (key <= 110))
(2 rows)

SELECT * FROM o_test50 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test50 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                   
-----------------------------------------------
 Seq Scan on o_test50
   Filter: ((value >= 200) AND (value <= 210))
(2 rows)

SELECT * FROM o_test50 WHERE value BETWEEN 200 and 210;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test50;
      QUERY PLAN      
----------------------
 Seq Scan on o_test50
(1 row)

SELECT count(*) FROM o_test50;
 count 
-------
   100
(1 row)

TRUNCATE o_test50;
-- value is primary index
CREATE TABLE o_test51
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY(value)
) USING orioledb;
SELECT orioledb_tbl_indices('o_test51'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test51_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: value              +
 
(1 row)

INSERT INTO o_test51 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
EXPLAIN (COSTS off) SELECT * FROM o_test51 WHERE key BETWEEN 100 and 110;
                QUERY PLAN                 
-------------------------------------------
 Seq Scan on o_test51
   Filter: ((key >= 100) AND (key <= 110))
(2 rows)

SELECT * FROM o_test51 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test51 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test51
   Forward index scan of: o_test51_pkey
   Conds: ((value >= 200) AND (value <= 210))
(3 rows)

SELECT * FROM o_test51 WHERE value BETWEEN 200 and 210;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test51;
      QUERY PLAN      
----------------------
 Seq Scan on o_test51
(1 row)

SELECT count(*) FROM o_test51;
 count 
-------
   100
(1 row)

TRUNCATE o_test51;
-- 2 fields as primary index
CREATE TABLE o_test52
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY(key, value)
) USING orioledb;
SELECT orioledb_tbl_indices('o_test52'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test52_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, value         +
 
(1 row)

INSERT INTO o_test52 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
EXPLAIN (COSTS off) SELECT * FROM o_test52 WHERE key BETWEEN 100 and 110;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test52
   Forward index only scan of: o_test52_pkey
   Conds: ((key >= 100) AND (key <= 110))
(3 rows)

SELECT * FROM o_test52 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test52 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test52
   Forward index only scan of: o_test52_pkey
   Conds: ((value >= 200) AND (value <= 210))
(3 rows)

SELECT * FROM o_test52 WHERE value BETWEEN 200 and 210;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test52;
      QUERY PLAN      
----------------------
 Seq Scan on o_test52
(1 row)

SELECT count(*) FROM o_test52;
 count 
-------
   100
(1 row)

TRUNCATE o_test52;
-- key is primary index
CREATE TABLE o_test53
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY(key)
) USING orioledb;
SELECT orioledb_tbl_indices('o_test53'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test53_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 
(1 row)

INSERT INTO o_test53 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
EXPLAIN (COSTS off) SELECT * FROM o_test53 WHERE key BETWEEN 100 and 110;
                QUERY PLAN                
------------------------------------------
 Custom Scan (o_scan) on o_test53
   Forward index scan of: o_test53_pkey
   Conds: ((key >= 100) AND (key <= 110))
(3 rows)

SELECT * FROM o_test53 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test53 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                   
-----------------------------------------------
 Seq Scan on o_test53
   Filter: ((value >= 200) AND (value <= 210))
(2 rows)

SELECT * FROM o_test53 WHERE value BETWEEN 200 and 210;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test53;
      QUERY PLAN      
----------------------
 Seq Scan on o_test53
(1 row)

SELECT count(*) FROM o_test53;
 count 
-------
   100
(1 row)

TRUNCATE o_test53;
-- key is primary index, value is secondary
CREATE TABLE o_test54
(
	key int8 NOT NULL,
	value int8,
	PRIMARY KEY(key)
) USING orioledb;
CREATE INDEX o_test54_sec ON o_test54 (value);
SELECT orioledb_tbl_indices('o_test54'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test54_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test54_sec                            +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: value, key         +
     Leaf tuple fields: value, key             +
 
(1 row)

INSERT INTO o_test54 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
ANALYZE o_test54;
SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT * FROM o_test54 WHERE key BETWEEN 100 and 110;
                QUERY PLAN                
------------------------------------------
 Custom Scan (o_scan) on o_test54
   Forward index scan of: o_test54_pkey
   Conds: ((key >= 100) AND (key <= 110))
(3 rows)

SELECT * FROM o_test54 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test54 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test54
   Forward index only scan of: o_test54_sec
   Conds: ((value >= 200) AND (value <= 210))
(3 rows)

SELECT * FROM o_test54 WHERE value BETWEEN 200 and 210;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

EXPLAIN (COSTS off) SELECT value, key FROM o_test54 WHERE value BETWEEN 200 and 210;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test54
   Forward index only scan of: o_test54_sec
   Conds: ((value >= 200) AND (value <= 210))
(3 rows)

SELECT value, key FROM o_test54 WHERE value BETWEEN 200 and 210;
 value | key 
-------+-----
   201 | 101
   202 | 102
   203 | 103
   204 | 104
   205 | 105
   206 | 106
   207 | 107
   208 | 108
   209 | 109
   210 | 110
(10 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT * FROM o_test54;
      QUERY PLAN      
----------------------
 Seq Scan on o_test54
(1 row)

SELECT count(*) FROM o_test54;
 count 
-------
   100
(1 row)

TRUNCATE o_test54;
-- value is primary index, key is secondary
CREATE TABLE o_test55
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY(value)
) USING orioledb;
CREATE UNIQUE INDEX o_test55_uniq ON o_test55(key);
SELECT orioledb_tbl_indices('o_test55'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test55_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: value              +
 Index o_test55_uniq                           +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, value         +
     Leaf tuple fields: key, value             +
 
(1 row)

INSERT INTO o_test55 VALUES (1, 2);
EXPLAIN (COSTS OFF) SELECT * FROM o_test55 WHERE key = 1;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test55
   Forward index only scan of: o_test55_uniq
   Conds: (key = 1)
(3 rows)

SELECT * FROM o_test55 WHERE key = 1;
 key | value 
-----+-------
   1 |     2
(1 row)

-- fails, secondary unique index contains key = 1
INSERT INTO o_test55 VALUES (1, 3);
ERROR:  duplicate key value violates unique constraint "o_test55"
DETAIL:  Key ('1') already exists
-- fails, primary index contains value = 2;
INSERT INTO o_test55 VALUES (3, 2);
ERROR:  duplicate key value violates unique constraint "o_test55"
DETAIL:  Key ('2') already exists
-- success
INSERT INTO o_test55 VALUES (3, 4);
ANALYZE o_test55;
SELECT * FROM o_test55 WHERE key >= 1;
 key | value 
-----+-------
   1 |     2
   3 |     4
(2 rows)

-- key is primary index (first unique)
CREATE TABLE o_test56
(
	key int8 NOT NULL,
	value int8,
	PRIMARY KEY (key)
) USING orioledb;
CREATE UNIQUE INDEX o_test56_uniq ON o_test56(value);
SELECT orioledb_tbl_indices('o_test56'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test56_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test56_uniq                           +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: value, key         +
     Leaf tuple fields: value, key             +
 
(1 row)

INSERT INTO o_test56 VALUES (1, 1);
INSERT INTO o_test56 VALUES (3, 3);
EXPLAIN (COSTS OFF) SELECT * FROM o_test56 WHERE key = 1;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test56
   Forward index scan of: o_test56_pkey
   Conds: (key = 1)
(3 rows)

SELECT * FROM o_test56 WHERE key = 1;
 key | value 
-----+-------
   1 |     1
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM o_test56 WHERE value = 3;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test56
   Forward index only scan of: o_test56_uniq
   Conds: (value = 3)
(3 rows)

SELECT * FROM o_test56 WHERE value = 3;
 key | value 
-----+-------
   3 |     3
(1 row)

-- fails, primary index contains key = 3;
UPDATE o_test56 SET key = 3 WHERE value = 1;
ERROR:  duplicate key value violates unique constraint "o_test56"
DETAIL:  Key ('3') already exists
-- fails, secondary unique index contains value = 3;
UPDATE o_test56 SET value = 3 WHERE value = 1;
ERROR:  duplicate key value violates unique constraint "o_test56"
DETAIL:  Key ('3') already exists
-- success
UPDATE o_test56 SET value = 2 WHERE value = 3;
UPDATE o_test56 SET key = 2 WHERE key = 1;
SELECT * FROM o_test56;
 key | value 
-----+-------
   2 |     1
   3 |     2
(2 rows)

SELECT * FROM o_test56 WHERE value > 0;
 key | value 
-----+-------
   2 |     1
   3 |     2
(2 rows)

-- three indices, value is primary
CREATE TABLE o_test57
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	foo int8,
	PRIMARY KEY (value)
) USING orioledb;
CREATE UNIQUE INDEX o_test57_uniq ON o_test57(key);
CREATE INDEX o_test57_reg ON o_test57(foo);
SELECT orioledb_tbl_indices('o_test57'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test57_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: value              +
 Index o_test57_uniq                           +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, value         +
     Leaf tuple fields: key, value             +
 Index o_test57_reg                            +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: foo, value         +
     Leaf tuple fields: foo, value             +
 
(1 row)

-- three indices, (key, value) is primary
CREATE TABLE o_test58
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	foo int8,
	bar int8,
	PRIMARY KEY(key, value)
) USING orioledb;
CREATE INDEX o_test58_reg1 ON o_test58(key);
CREATE INDEX o_test58_reg2 ON o_test58(foo);
SELECT orioledb_tbl_indices('o_test58'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test58_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 4, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, value         +
 Index o_test58_reg1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, value         +
     Leaf tuple fields: key, value             +
 Index o_test58_reg2                           +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: foo, key, value    +
     Leaf tuple fields: foo, key, value        +
 
(1 row)

INSERT INTO o_test58 SELECT 100 + i, 200 + i, 300 + i, 400 + i FROM generate_series(1, 10) AS i;
SELECT orioledb_tbl_check('o_test58'::regclass);
 orioledb_tbl_check 
--------------------
 t
(1 row)

EXPLAIN (COSTS off) SELECT * FROM o_test58;
      QUERY PLAN      
----------------------
 Seq Scan on o_test58
(1 row)

EXPLAIN (COSTS off) SELECT * FROM o_test58 WHERE foo = 301;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test58
   Forward index scan of: o_test58_reg2
   Conds: (foo = 301)
(3 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test58 WHERE foo > 300 and foo < 400 and
												 bar = 300;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test58
   Filter: (bar = 300)
   Forward index scan of: o_test58_reg2
   Conds: ((foo > 300) AND (foo < 400))
(4 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test58 WHERE bar = 200;
      QUERY PLAN       
-----------------------
 Seq Scan on o_test58
   Filter: (bar = 200)
(2 rows)

SELECT smart_explain(
'EXPLAIN (COSTS off) UPDATE o_test58 SET foo = 100 WHERE foo > 102 AND
														 foo < 400;');
                smart_explain                 
----------------------------------------------
 Update on o_test58
   ->  Custom Scan (o_scan) on o_test58
         Forward index scan of: o_test58_reg2
         Conds: ((foo > 102) AND (foo < 400))
(4 rows)

UPDATE o_test58 SET foo = 100 WHERE foo > 102;
--SELECT orioledb_tbl_structure('o_test58'::regclass);
UPDATE o_test58 SET key = 100 WHERE foo > 100;
--SELECT orioledb_tbl_structure('o_test58'::regclass);
-- three indices, (pri1, pri2) is primary, sec1 and sec2 - secondary
CREATE TABLE o_test59
(
	sec1 int8 NOT NULL,
	pri1 int8 NOT NULL,
	pri2 int8 NOT NULL,
	sec2 int8,
	foo int8,
	PRIMARY KEY(pri1, pri2)
) USING orioledb;
CREATE INDEX o_test59_reg1 ON o_test59(sec1);
CREATE INDEX o_test59_reg2 ON o_test59(sec2);
EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE sec1 = 100;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Forward index scan of: o_test59_reg1
   Conds: (sec1 = 100)
(3 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE sec1 = 100 and pri1 > 200;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Filter: (pri1 > 200)
   Forward index scan of: o_test59_reg1
   Conds: (sec1 = 100)
(4 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE sec1 = 100 and pri1 = 200;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Filter: (pri1 = 200)
   Forward index scan of: o_test59_reg1
   Conds: (sec1 = 100)
(4 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE pri1 = 100;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Forward index scan of: o_test59_pkey
   Conds: (pri1 = 100)
(3 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE sec2 = 200;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Forward index scan of: o_test59_reg2
   Conds: (sec2 = 200)
(3 rows)

EXPLAIN (COSTS off) SELECT * FROM o_test59 WHERE sec2 = 200 and pri1 = 100;
               QUERY PLAN               
----------------------------------------
 Custom Scan (o_scan) on o_test59
   Filter: (pri1 = 100)
   Forward index scan of: o_test59_reg2
   Conds: (sec2 = 200)
(4 rows)

INSERT INTO o_test59 SELECT 100 + i, 200 + i, 300 + i, 400 + i, 500 + i FROM generate_series(1, 10) AS i;
--SELECT orioledb_tbl_structure('o_test59'::regclass);
-- update not index field
SELECT smart_explain(
'EXPLAIN (COSTS off) UPDATE o_test59 SET foo = 0 WHERE sec1 > 105 AND
													   sec1 < 200;');
                 smart_explain                  
------------------------------------------------
 Update on o_test59
   ->  Custom Scan (o_scan) on o_test59
         Forward index scan of: o_test59_reg1
         Conds: ((sec1 > 105) AND (sec1 < 200))
(4 rows)

UPDATE o_test59 SET foo = 0 WHERE sec1 > 105;
--SELECT orioledb_tbl_structure('o_test59'::regclass);
-- update only sec1 index field
SELECT smart_explain(
'EXPLAIN (COSTS off) UPDATE o_test59 SET sec1 = 100 WHERE sec2 > 405 and sec2 < 408;');
                 smart_explain                  
------------------------------------------------
 Update on o_test59
   ->  Custom Scan (o_scan) on o_test59
         Forward index scan of: o_test59_reg2
         Conds: ((sec2 > 405) AND (sec2 < 408))
(4 rows)

UPDATE o_test59 SET sec1 = 100 WHERE sec2 > 405 and sec2 < 408;
--SELECT orioledb_tbl_structure('o_test59'::regclass);
-- update primary index field
SELECT smart_explain(
'EXPLAIN (COSTS off) UPDATE o_test59 SET pri1 = 50 WHERE sec1 = 100;');
                smart_explain                 
----------------------------------------------
 Update on o_test59
   ->  Custom Scan (o_scan) on o_test59
         Forward index scan of: o_test59_reg1
         Conds: (sec1 = 100)
(4 rows)

UPDATE o_test59 SET pri1 = 50 WHERE sec1 = 100;
--SELECT orioledb_tbl_structure('o_test59'::regclass);
-- 1 ctid index + 2 non-unique indices
CREATE TABLE o_test61
(
	key int8 NOT NULL,
	value int8 NOT NULL
) USING orioledb;
CREATE INDEX o_test61_reg1 ON o_test61(key);
CREATE INDEX o_test61_reg2 ON o_test61(value);
SELECT orioledb_tbl_indices('o_test61'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 Index o_test61_reg1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, ctid          +
     Leaf tuple fields: key, ctid              +
 Index o_test61_reg2                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: value, ctid        +
     Leaf tuple fields: value, ctid            +
 
(1 row)

INSERT INTO o_test61 SELECT 100 + i, 200 + i FROM generate_series(1, 100) AS i;
ANALYZE o_test61;
EXPLAIN (COSTS off) SELECT * FROM o_test61 WHERE key BETWEEN 100 and 110;
                QUERY PLAN                
------------------------------------------
 Custom Scan (o_scan) on o_test61
   Forward index scan of: o_test61_reg1
   Conds: ((key >= 100) AND (key <= 110))
(3 rows)

SELECT * FROM o_test61 WHERE key BETWEEN 100 and 110;
 key | value 
-----+-------
 101 |   201
 102 |   202
 103 |   203
 104 |   204
 105 |   205
 106 |   206
 107 |   207
 108 |   208
 109 |   209
 110 |   210
(10 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT * FROM o_test61 WHERE value BETWEEN 250 and 260;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test61
   Forward index scan of: o_test61_reg2
   Conds: ((value >= 250) AND (value <= 260))
(3 rows)

SELECT * FROM o_test61 WHERE value BETWEEN 250 and 260;
 key | value 
-----+-------
 150 |   250
 151 |   251
 152 |   252
 153 |   253
 154 |   254
 155 |   255
 156 |   256
 157 |   257
 158 |   258
 159 |   259
 160 |   260
(11 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT count(*) FROM o_test61;
         QUERY PLAN         
----------------------------
 Aggregate
   ->  Seq Scan on o_test61
(2 rows)

SELECT count(*) FROM o_test61;
 count 
-------
   100
(1 row)

-- primary key - first field
-- secondary key - second field DESC
CREATE TABLE o_test65
(
	val text NOT NULL,
	id int8 NOT NULL,
	PRIMARY KEY(val)
) USING orioledb;
CREATE INDEX o_test65_reg1 ON o_test65(id DESC);
INSERT INTO o_test65 SELECT i+1, i FROM generate_series(1, 60) AS i;
SELECT count(*) FROM o_test65;
 count 
-------
    60
(1 row)

SELECT id, val FROM o_test65;
 id | val 
----+-----
  9 | 10
 10 | 11
 11 | 12
 12 | 13
 13 | 14
 14 | 15
 15 | 16
 16 | 17
 17 | 18
 18 | 19
  1 | 2
 19 | 20
 20 | 21
 21 | 22
 22 | 23
 23 | 24
 24 | 25
 25 | 26
 26 | 27
 27 | 28
 28 | 29
  2 | 3
 29 | 30
 30 | 31
 31 | 32
 32 | 33
 33 | 34
 34 | 35
 35 | 36
 36 | 37
 37 | 38
 38 | 39
  3 | 4
 39 | 40
 40 | 41
 41 | 42
 42 | 43
 43 | 44
 44 | 45
 45 | 46
 46 | 47
 47 | 48
 48 | 49
  4 | 5
 49 | 50
 50 | 51
 51 | 52
 52 | 53
 53 | 54
 54 | 55
 55 | 56
 56 | 57
 57 | 58
 58 | 59
  5 | 6
 59 | 60
 60 | 61
  6 | 7
  7 | 8
  8 | 9
(60 rows)

EXPLAIN (COSTS off) SELECT val, id FROM o_test65 ORDER BY id;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test65
   Backward index only scan of: o_test65_reg1
(2 rows)

SELECT val, id FROM o_test65 ORDER BY id;
 val | id 
-----+----
 2   |  1
 3   |  2
 4   |  3
 5   |  4
 6   |  5
 7   |  6
 8   |  7
 9   |  8
 10  |  9
 11  | 10
 12  | 11
 13  | 12
 14  | 13
 15  | 14
 16  | 15
 17  | 16
 18  | 17
 19  | 18
 20  | 19
 21  | 20
 22  | 21
 23  | 22
 24  | 23
 25  | 24
 26  | 25
 27  | 26
 28  | 27
 29  | 28
 30  | 29
 31  | 30
 32  | 31
 33  | 32
 34  | 33
 35  | 34
 36  | 35
 37  | 36
 38  | 37
 39  | 38
 40  | 39
 41  | 40
 42  | 41
 43  | 42
 44  | 43
 45  | 44
 46  | 45
 47  | 46
 48  | 47
 49  | 48
 50  | 49
 51  | 50
 52  | 51
 53  | 52
 54  | 53
 55  | 54
 56  | 55
 57  | 56
 58  | 57
 59  | 58
 60  | 59
 61  | 60
(60 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 ORDER BY id;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test65
   Backward index only scan of: o_test65_reg1
(2 rows)

SELECT id, val FROM o_test65 ORDER BY id;
 id | val 
----+-----
  1 | 2
  2 | 3
  3 | 4
  4 | 5
  5 | 6
  6 | 7
  7 | 8
  8 | 9
  9 | 10
 10 | 11
 11 | 12
 12 | 13
 13 | 14
 14 | 15
 15 | 16
 16 | 17
 17 | 18
 18 | 19
 19 | 20
 20 | 21
 21 | 22
 22 | 23
 23 | 24
 24 | 25
 25 | 26
 26 | 27
 27 | 28
 28 | 29
 29 | 30
 30 | 31
 31 | 32
 32 | 33
 33 | 34
 34 | 35
 35 | 36
 36 | 37
 37 | 38
 38 | 39
 39 | 40
 40 | 41
 41 | 42
 42 | 43
 43 | 44
 44 | 45
 45 | 46
 46 | 47
 47 | 48
 48 | 49
 49 | 50
 50 | 51
 51 | 52
 52 | 53
 53 | 54
 54 | 55
 55 | 56
 56 | 57
 57 | 58
 58 | 59
 59 | 60
 60 | 61
(60 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 ORDER BY id DESC;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
(2 rows)

SELECT id, val FROM o_test65 ORDER BY id DESC;
 id | val 
----+-----
 60 | 61
 59 | 60
 58 | 59
 57 | 58
 56 | 57
 55 | 56
 54 | 55
 53 | 54
 52 | 53
 51 | 52
 50 | 51
 49 | 50
 48 | 49
 47 | 48
 46 | 47
 45 | 46
 44 | 45
 43 | 44
 42 | 43
 41 | 42
 40 | 41
 39 | 40
 38 | 39
 37 | 38
 36 | 37
 35 | 36
 34 | 35
 33 | 34
 32 | 33
 31 | 32
 30 | 31
 29 | 30
 28 | 29
 27 | 28
 26 | 27
 25 | 26
 24 | 25
 23 | 24
 22 | 23
 21 | 22
 20 | 21
 19 | 20
 18 | 19
 17 | 18
 16 | 17
 15 | 16
 14 | 15
 13 | 14
 12 | 13
 11 | 12
 10 | 11
  9 | 10
  8 | 9
  7 | 8
  6 | 7
  5 | 6
  4 | 5
  3 | 4
  2 | 3
  1 | 2
(60 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id = 30;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
   Conds: (id = 30)
(3 rows)

SELECT id, val FROM o_test65 WHERE id = 30;
 id | val 
----+-----
 30 | 31
(1 row)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id <= 30 AND id >= 1;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
   Conds: ((id <= 30) AND (id >= 1))
(3 rows)

SELECT id, val FROM o_test65 WHERE id <= 30 AND id >= 1;
 id | val 
----+-----
 30 | 31
 29 | 30
 28 | 29
 27 | 28
 26 | 27
 25 | 26
 24 | 25
 23 | 24
 22 | 23
 21 | 22
 20 | 21
 19 | 20
 18 | 19
 17 | 18
 16 | 17
 15 | 16
 14 | 15
 13 | 14
 12 | 13
 11 | 12
 10 | 11
  9 | 10
  8 | 9
  7 | 8
  6 | 7
  5 | 6
  4 | 5
  3 | 4
  2 | 3
  1 | 2
(30 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id >= 30 AND id < 100;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
   Conds: ((id >= 30) AND (id < 100))
(3 rows)

SELECT id, val FROM o_test65 WHERE id >= 30 AND id < 100;
 id | val 
----+-----
 60 | 61
 59 | 60
 58 | 59
 57 | 58
 56 | 57
 55 | 56
 54 | 55
 53 | 54
 52 | 53
 51 | 52
 50 | 51
 49 | 50
 48 | 49
 47 | 48
 46 | 47
 45 | 46
 44 | 45
 43 | 44
 42 | 43
 41 | 42
 40 | 41
 39 | 40
 38 | 39
 37 | 38
 36 | 37
 35 | 36
 34 | 35
 33 | 34
 32 | 33
 31 | 32
 30 | 31
(31 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id <= 30 AND id > 15;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
   Conds: ((id <= 30) AND (id > 15))
(3 rows)

SELECT id, val FROM o_test65 WHERE id <= 30 AND id > 15;
 id | val 
----+-----
 30 | 31
 29 | 30
 28 | 29
 27 | 28
 26 | 27
 25 | 26
 24 | 25
 23 | 24
 22 | 23
 21 | 22
 20 | 21
 19 | 20
 18 | 19
 17 | 18
 16 | 17
(15 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id >= 30 AND id < 45;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test65
   Forward index only scan of: o_test65_reg1
   Conds: ((id >= 30) AND (id < 45))
(3 rows)

SELECT id, val FROM o_test65 WHERE id >= 30 AND id < 45;
 id | val 
----+-----
 44 | 45
 43 | 44
 42 | 43
 41 | 42
 40 | 41
 39 | 40
 38 | 39
 37 | 38
 36 | 37
 35 | 36
 34 | 35
 33 | 34
 32 | 33
 31 | 32
 30 | 31
(15 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id <= 30 OR id > 45;
             QUERY PLAN              
-------------------------------------
 Seq Scan on o_test65
   Filter: ((id <= 30) OR (id > 45))
(2 rows)

SELECT id, val FROM o_test65 WHERE id <= 30 OR id > 45;
 id | val 
----+-----
  9 | 10
 10 | 11
 11 | 12
 12 | 13
 13 | 14
 14 | 15
 15 | 16
 16 | 17
 17 | 18
 18 | 19
  1 | 2
 19 | 20
 20 | 21
 21 | 22
 22 | 23
 23 | 24
 24 | 25
 25 | 26
 26 | 27
 27 | 28
 28 | 29
  2 | 3
 29 | 30
 30 | 31
  3 | 4
 46 | 47
 47 | 48
 48 | 49
  4 | 5
 49 | 50
 50 | 51
 51 | 52
 52 | 53
 53 | 54
 54 | 55
 55 | 56
 56 | 57
 57 | 58
 58 | 59
  5 | 6
 59 | 60
 60 | 61
  6 | 7
  7 | 8
  8 | 9
(45 rows)

EXPLAIN (COSTS off) SELECT id, val FROM o_test65 WHERE id >= 30 OR id < 15;
             QUERY PLAN              
-------------------------------------
 Seq Scan on o_test65
   Filter: ((id >= 30) OR (id < 15))
(2 rows)

SELECT id, val FROM o_test65 WHERE id >= 30 OR id < 15;
 id | val 
----+-----
  9 | 10
 10 | 11
 11 | 12
 12 | 13
 13 | 14
 14 | 15
  1 | 2
  2 | 3
 30 | 31
 31 | 32
 32 | 33
 33 | 34
 34 | 35
 35 | 36
 36 | 37
 37 | 38
 38 | 39
  3 | 4
 39 | 40
 40 | 41
 41 | 42
 42 | 43
 43 | 44
 44 | 45
 45 | 46
 46 | 47
 47 | 48
 48 | 49
  4 | 5
 49 | 50
 50 | 51
 51 | 52
 52 | 53
 53 | 54
 54 | 55
 55 | 56
 56 | 57
 57 | 58
 58 | 59
  5 | 6
 59 | 60
 60 | 61
  6 | 7
  7 | 8
  8 | 9
(45 rows)

-- 2 fields secondary index
CREATE TABLE test66
(
	idi int4 NOT NULL,
	idv varchar NOT NULL,
	PRIMARY KEY (idi, idv)
);
INSERT INTO test66
	SELECT i, j::text||k
	FROM generate_series(1,3) as i,
	     generate_series(1,3) as j,
	     generate_series(1,3) as k
	WHERE (j+k)%4 <> 0;
CREATE TABLE o_test66
(
	idi int4 NOT NULL,
	idp int4 NOT NULL,
	idv varchar NOT NULL,
	PRIMARY KEY (idp)
) USING orioledb;
CREATE INDEX o_test66_reg1 ON o_test66(idi, idv);
INSERT INTO o_test66
	SELECT i, i * 100 + j * 10 + k, j::text||k
	FROM generate_series(1,3) as i,
	     generate_series(1,3) as j,
	     generate_series(1,3) as k;
ANALYZE o_test66;
SELECT count(*) FROM o_test66;
 count 
-------
    27
(1 row)

SELECT idi, idv FROM o_test66;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
(2 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test66
   Backward index only scan of: o_test66_reg1
(2 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi DESC;
 idi | idv 
-----+-----
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi, idv;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
(2 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi, idv;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi DESC, idv;
                     QUERY PLAN                     
----------------------------------------------------
 Sort
   Sort Key: idi DESC, idv
   ->  Custom Scan (o_scan) on o_test66
         Backward index only scan of: o_test66_reg1
(4 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi DESC, idv;
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi, idv DESC;
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: idi, idv DESC
   ->  Custom Scan (o_scan) on o_test66
         Forward index only scan of: o_test66_reg1
(4 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi, idv DESC;
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 ORDER BY idi DESC, idv DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test66
   Backward index only scan of: o_test66_reg1
(2 rows)

SELECT idi, idv FROM o_test66 ORDER BY idi DESC, idv DESC;
 idi | idv 
-----+-----
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: (idi = 2)
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2;
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(9 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: (idv = '22'::text)
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
   3 | 22
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
(1 row)

-- Test Result node processing
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idi = 1;
                    QUERY PLAN                     
---------------------------------------------------
 Result
   One-Time Filter: false
   ->  Custom Scan (o_scan) on o_test66
         Forward index only scan of: o_test66_reg1
         Conds: (idi = 2)
(5 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idi = 1;
 idi | idv 
-----+-----
(0 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '22';
 idi | idv 
-----+-----
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv < '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv < '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv >= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv <= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv <= '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '12' AND idv <= '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
   2 | 22
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '12' AND idv < '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv >= '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '12' AND idv < '22';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv > '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test66_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(7 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: (((idv)::text < '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test66_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test66_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' OR idv > '22');
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: (((idv)::text < '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test66_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' AND idv > '22');
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv < '12'::text) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND (idv < '12' AND idv > '22');
 idi | idv 
-----+-----
(0 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv IN ('12', '22');
                        QUERY PLAN                        
----------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi = 2) AND (idv = ANY ('{12,22}'::text[])))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi = 2 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi IN (2, 4) AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test66_reg1
   Conds: (idi = ANY ('{2,4}'::integer[]))
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi IN (2, 4) AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: (((idi = 2) AND ((idv)::text = '12'::text)) OR ((idi = 4) AND ((idv)::text = '2_3'::text)))
   Forward index only scan of: o_test66_reg1
(3 rows)

SELECT idi, idv FROM o_test66 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
 idi | idv 
-----+-----
   2 | 12
(1 row)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi > 1 AND
														idi < 100 AND
														idv < '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi > 1 AND
									idi < 100 AND
									idv < '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   3 | 11
   3 | 12
   3 | 13
   3 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi > 1 AND
									idi < 100 AND
									idv > '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi > 1 AND
									idi < 100 AND
									idv > '22';
 idi | idv 
-----+-----
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi > 1 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi > 1) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi > 1 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
   3 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi < 3 AND
									idi > 0 AND
									idv < '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi < 3 AND
									idi > 0 AND
									idv < '22';
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   2 | 11
   2 | 12
   2 | 13
   2 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi < 3 AND
									idi > 0 AND
									idv > '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi < 3  AND
									idi > 0 AND
									idv > '22';
 idi | idv 
-----+-----
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi < 3 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test66
   Forward index only scan of: o_test66_reg1
   Conds: ((idi < 3) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test66 WHERE idi < 3 AND idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test66 WHERE idi > 1 AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test66
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test66_reg1
   Conds: (idi > 1)
(4 rows)

SELECT idi, idv FROM o_test66 WHERE idi > 1 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
   3 | 12
   3 | 22
(4 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test66.idi) AND ((test66.idv)::text = (o_test66.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test66
(5 rows)

SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test66.idi) AND ((test66.idv)::text = (o_test66.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test66
(5 rows)

SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_hashjoin=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Merge Join
   Merge Cond: ((test66.idi = o_test66.idi) AND ((test66.idv)::text = (o_test66.idv)::text))
   ->  Index Only Scan using test66_pkey on test66
   ->  Sort
         Sort Key: o_test66.idi, o_test66.idv
         ->  Seq Scan on o_test66
(6 rows)

SELECT * FROM test66 JOIN o_test66 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=on;
set enable_hashjoin=on;
-- 2 field secondary index with second field desc
CREATE TABLE o_test67
(
	idi int4 NOT NULL,
	idp int4 NOT NULL,
	idv varchar NOT NULL,
	PRIMARY KEY (idp)
) USING orioledb;
CREATE INDEX o_test67_reg1 ON o_test67(idi, idv DESC);
INSERT INTO o_test67
	SELECT i, i * 100 + j * 10 + k, j::text||k
	FROM generate_series(1,3) as i,
	     generate_series(1,3) as j,
	     generate_series(1,3) as k;
ANALYZE o_test67;
SELECT count(*) FROM o_test67;
 count 
-------
    27
(1 row)

SELECT idi, idv FROM o_test67;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
(2 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi;
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test67
   Backward index only scan of: o_test67_reg1
(2 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi DESC;
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(27 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi, idv;
         QUERY PLAN         
----------------------------
 Sort
   Sort Key: idi, idv
   ->  Seq Scan on o_test67
(3 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi, idv;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi DESC, idv;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test67
   Backward index only scan of: o_test67_reg1
(2 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi DESC, idv;
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi, idv DESC;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
(2 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi, idv DESC;
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(27 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 ORDER BY idi DESC, idv DESC;
           QUERY PLAN           
--------------------------------
 Sort
   Sort Key: idi DESC, idv DESC
   ->  Seq Scan on o_test67
(3 rows)

SELECT idi, idv FROM o_test67 ORDER BY idi DESC, idv DESC;
 idi | idv 
-----+-----
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: (idi = 2)
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2;
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
(9 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idv = '22';
              QUERY PLAN              
--------------------------------------
 Seq Scan on o_test67
   Filter: ((idv)::text = '22'::text)
(2 rows)

SELECT idi, idv FROM o_test67 WHERE idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
   3 | 22
(3 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
(1 row)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '22';
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv < '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv < '22';
 idi | idv 
-----+-----
   2 | 21
   2 | 13
   2 | 12
   2 | 11
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv >= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '22';
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv <= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv <= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 21
   2 | 13
   2 | 12
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '12' AND idv <= '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 21
   2 | 13
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '12' AND idv < '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv >= '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 21
   2 | 13
   2 | 12
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '12' AND idv < '22';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv > '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 21
   2 | 13
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test67_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 12
   2 | 11
(7 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: (((idv)::text < '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test67_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 11
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test67_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 12
   2 | 11
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' OR idv > '22');
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: (((idv)::text < '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test67_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 11
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' AND idv > '22');
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv < '12'::text) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND (idv < '12' AND idv > '22');
 idi | idv 
-----+-----
(0 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv IN ('12', '22');
                        QUERY PLAN                        
----------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi = 2) AND (idv = ANY ('{12,22}'::text[])))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi = 2 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 22
   2 | 12
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi IN (2, 4) AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test67_reg1
   Conds: (idi = ANY ('{2,4}'::integer[]))
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi IN (2, 4) AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 22
   2 | 12
(2 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Seq Scan on o_test67
   Filter: (((idi = 2) AND ((idv)::text = '12'::text)) OR ((idi = 4) AND ((idv)::text = '2_3'::text)))
(2 rows)

SELECT idi, idv FROM o_test67 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
 idi | idv 
-----+-----
   2 | 12
(1 row)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi > 1 AND
														idi < 100 AND
														idv < '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idi < 100 AND idv < '22';
 idi | idv 
-----+-----
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi > 1 AND
														idi < 100 AND
														idv > '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idi < 100 AND idv > '22';
 idi | idv 
-----+-----
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   3 | 33
   3 | 32
   3 | 31
   3 | 23
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi > 1) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
   3 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi < 3 AND
														idi > 0 AND
														idv < '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi < 3 AND idi > 0 AND idv < '22';
 idi | idv 
-----+-----
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 21
   2 | 13
   2 | 12
   2 | 11
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi < 3 AND
														idi > 0 AND
														idv > '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi < 3 AND idi > 0 AND idv > '22';
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   2 | 33
   2 | 32
   2 | 31
   2 | 23
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi < 3 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test67
   Forward index only scan of: o_test67_reg1
   Conds: ((idi < 3) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test67 WHERE idi < 3 AND idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test67
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test67_reg1
   Conds: (idi > 1)
(4 rows)

SELECT idi, idv FROM o_test67 WHERE idi > 1 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 22
   2 | 12
   3 | 22
   3 | 12
(4 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test67.idi) AND ((test66.idv)::text = (o_test67.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test67
(5 rows)

SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test67.idi) AND ((test66.idv)::text = (o_test67.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test67
(5 rows)

SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_hashjoin=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Merge Join
   Merge Cond: ((test66.idi = o_test67.idi) AND ((test66.idv)::text = (o_test67.idv)::text))
   ->  Index Only Scan using test66_pkey on test66
   ->  Sort
         Sort Key: o_test67.idi, o_test67.idv
         ->  Seq Scan on o_test67
(6 rows)

SELECT * FROM test66 JOIN o_test67 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=on;
set enable_hashjoin=on;
-- 2 field secondary index with different field order and first field desc
CREATE TABLE o_test68
(
	idv varchar NOT NULL,
	idp int4 NOT NULL,
	idi int4 NOT NULL,
	PRIMARY KEY(idp)
) USING orioledb;
CREATE INDEX o_test68_reg1 ON o_test68(idi DESC, idv);
INSERT INTO o_test68
	SELECT j::text||k, i * 100 + j * 10 + k, i
	FROM generate_series(1,3) as i,
	     generate_series(1,3) as j,
	     generate_series(1,3) as k;
ANALYZE o_test68;
SELECT count(*) FROM o_test68;
 count 
-------
    27
(1 row)

SELECT idi, idv FROM o_test68;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test68
   Backward index only scan of: o_test68_reg1
(2 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi;
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi DESC;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
(2 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi DESC;
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(27 rows)

RESET enable_seqscan;
SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi, idv;
                     QUERY PLAN                     
----------------------------------------------------
 Sort
   Sort Key: idi, idv
   ->  Custom Scan (o_scan) on o_test68
         Backward index only scan of: o_test68_reg1
(4 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi, idv;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi DESC, idv;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
(2 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi DESC, idv;
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi, idv DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test68
   Backward index only scan of: o_test68_reg1
(2 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi, idv DESC;
 idi | idv 
-----+-----
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 ORDER BY idi DESC, idv DESC;
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: idi DESC, idv DESC
   ->  Custom Scan (o_scan) on o_test68
         Forward index only scan of: o_test68_reg1
(4 rows)

SELECT idi, idv FROM o_test68 ORDER BY idi DESC, idv DESC;
 idi | idv 
-----+-----
   3 | 33
   3 | 32
   3 | 31
   3 | 23
   3 | 22
   3 | 21
   3 | 13
   3 | 12
   3 | 11
   2 | 33
   2 | 32
   2 | 31
   2 | 23
   2 | 22
   2 | 21
   2 | 13
   2 | 12
   2 | 11
   1 | 33
   1 | 32
   1 | 31
   1 | 23
   1 | 22
   1 | 21
   1 | 13
   1 | 12
   1 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: (idi = 2)
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2;
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(9 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idv = '22';
              QUERY PLAN              
--------------------------------------
 Seq Scan on o_test68
   Filter: ((idv)::text = '22'::text)
(2 rows)

SELECT idi, idv FROM o_test68 WHERE idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
   3 | 22
(3 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
(1 row)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '22';
 idi | idv 
-----+-----
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv < '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv < '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv >= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv <= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv <= '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '12' AND idv <= '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv <= '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
   2 | 22
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '12' AND idv < '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv >= '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv >= '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '12' AND idv < '22';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv > '12'::text) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv > '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test68_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv <= '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(7 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: (((idv)::text < '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test68_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' OR idv >= '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test68_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv <= '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' OR idv > '22');
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: (((idv)::text < '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test68_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' OR idv > '22');
 idi | idv 
-----+-----
   2 | 11
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' AND idv > '22');
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv < '12'::text) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND (idv < '12' AND idv > '22');
 idi | idv 
-----+-----
(0 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv IN ('12', '22');
                        QUERY PLAN                        
----------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi = 2) AND (idv = ANY ('{12,22}'::text[])))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi = 2 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi IN (2, 4) AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test68_reg1
   Conds: (idi = ANY ('{2,4}'::integer[]))
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi IN (2, 4) AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Seq Scan on o_test68
   Filter: (((idi = 2) AND ((idv)::text = '12'::text)) OR ((idi = 4) AND ((idv)::text = '2_3'::text)))
(2 rows)

SELECT idi, idv FROM o_test68 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
 idi | idv 
-----+-----
   2 | 12
(1 row)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi > 1 AND
														idi < 100 AND
														idv < '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idi < 100 AND idv < '22';
 idi | idv 
-----+-----
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   2 | 11
   2 | 12
   2 | 13
   2 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi > 1 AND
														idi < 100 AND
														idv > '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi > 1) AND (idi < 100) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idi < 100 AND idv > '22';
 idi | idv 
-----+-----
   3 | 23
   3 | 31
   3 | 32
   3 | 33
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi > 1) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idv = '22';
 idi | idv 
-----+-----
   3 | 22
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi < 3 AND
														idi > 0 AND
														idv < '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv < '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi < 3 AND idi > 0 AND idv < '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   1 | 11
   1 | 12
   1 | 13
   1 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi < 3 AND
														idi > 0 AND
														idv > '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi < 3) AND (idi > 0) AND (idv > '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi < 3 AND idi > 0 AND idv > '22';
 idi | idv 
-----+-----
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   1 | 23
   1 | 31
   1 | 32
   1 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi < 3 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test68
   Forward index only scan of: o_test68_reg1
   Conds: ((idi < 3) AND (idv = '22'::text))
(3 rows)

SELECT idi, idv FROM o_test68 WHERE idi < 3 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
   1 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idv IN ('12', '22');
                    QUERY PLAN                     
---------------------------------------------------
 Custom Scan (o_scan) on o_test68
   Filter: ((idv)::text = ANY ('{12,22}'::text[]))
   Forward index only scan of: o_test68_reg1
   Conds: (idi > 1)
(4 rows)

SELECT idi, idv FROM o_test68 WHERE idi > 1 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   3 | 12
   3 | 22
   2 | 12
   2 | 22
(4 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test68.idi) AND ((test66.idv)::text = (o_test68.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test68
(5 rows)

SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test68.idi) AND ((test66.idv)::text = (o_test68.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test68
(5 rows)

SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_hashjoin=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Merge Join
   Merge Cond: ((test66.idi = o_test68.idi) AND ((test66.idv)::text = (o_test68.idv)::text))
   ->  Index Only Scan using test66_pkey on test66
   ->  Sort
         Sort Key: o_test68.idi, o_test68.idv
         ->  Seq Scan on o_test68
(6 rows)

SELECT * FROM test66 JOIN o_test68 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=on;
set enable_hashjoin=on;
-- 2 field sk with text field first
CREATE TABLE o_test69
(
	idv varchar NOT NULL,
	idi int4 NOT NULL,
	idp int4 NOT NULL,
	PRIMARY KEY(idp)
) USING orioledb;
CREATE INDEX o_test69_reg1 ON o_test69(idv, idi);
INSERT INTO o_test69
	SELECT j::text||k, i, 100 * i + 10 * j + k
	FROM generate_series(1,3) as i,
	     generate_series(1,3) as j,
	     generate_series(1,3) as k;
ANALYZE o_test69;
SELECT count(*) FROM o_test69;
 count 
-------
    27
(1 row)

SELECT idi, idv FROM o_test69;
 idi | idv 
-----+-----
   1 | 11
   1 | 12
   1 | 13
   1 | 21
   1 | 22
   1 | 23
   1 | 31
   1 | 32
   1 | 33
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
   3 | 11
   3 | 12
   3 | 13
   3 | 21
   3 | 22
   3 | 23
   3 | 31
   3 | 32
   3 | 33
(27 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
(2 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv;
 idi | idv 
-----+-----
   1 | 11
   2 | 11
   3 | 11
   1 | 12
   2 | 12
   3 | 12
   1 | 13
   2 | 13
   3 | 13
   1 | 21
   2 | 21
   3 | 21
   1 | 22
   2 | 22
   3 | 22
   1 | 23
   2 | 23
   3 | 23
   1 | 31
   2 | 31
   3 | 31
   1 | 32
   2 | 32
   3 | 32
   1 | 33
   2 | 33
   3 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test69
   Backward index only scan of: o_test69_reg1
(2 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv DESC;
 idi | idv 
-----+-----
   3 | 33
   2 | 33
   1 | 33
   3 | 32
   2 | 32
   1 | 32
   3 | 31
   2 | 31
   1 | 31
   3 | 23
   2 | 23
   1 | 23
   3 | 22
   2 | 22
   1 | 22
   3 | 21
   2 | 21
   1 | 21
   3 | 13
   2 | 13
   1 | 13
   3 | 12
   2 | 12
   1 | 12
   3 | 11
   2 | 11
   1 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv, idi;
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
(2 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv, idi;
 idi | idv 
-----+-----
   1 | 11
   2 | 11
   3 | 11
   1 | 12
   2 | 12
   3 | 12
   1 | 13
   2 | 13
   3 | 13
   1 | 21
   2 | 21
   3 | 21
   1 | 22
   2 | 22
   3 | 22
   1 | 23
   2 | 23
   3 | 23
   1 | 31
   2 | 31
   3 | 31
   1 | 32
   2 | 32
   3 | 32
   1 | 33
   2 | 33
   3 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv DESC, idi;
                     QUERY PLAN                     
----------------------------------------------------
 Sort
   Sort Key: idv DESC, idi
   ->  Custom Scan (o_scan) on o_test69
         Backward index only scan of: o_test69_reg1
(4 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv DESC, idi;
 idi | idv 
-----+-----
   1 | 33
   2 | 33
   3 | 33
   1 | 32
   2 | 32
   3 | 32
   1 | 31
   2 | 31
   3 | 31
   1 | 23
   2 | 23
   3 | 23
   1 | 22
   2 | 22
   3 | 22
   1 | 21
   2 | 21
   3 | 21
   1 | 13
   2 | 13
   3 | 13
   1 | 12
   2 | 12
   3 | 12
   1 | 11
   2 | 11
   3 | 11
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv, idi DESC;
                    QUERY PLAN                     
---------------------------------------------------
 Sort
   Sort Key: idv, idi DESC
   ->  Custom Scan (o_scan) on o_test69
         Forward index only scan of: o_test69_reg1
(4 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv, idi DESC;
 idi | idv 
-----+-----
   3 | 11
   2 | 11
   1 | 11
   3 | 12
   2 | 12
   1 | 12
   3 | 13
   2 | 13
   1 | 13
   3 | 21
   2 | 21
   1 | 21
   3 | 22
   2 | 22
   1 | 22
   3 | 23
   2 | 23
   1 | 23
   3 | 31
   2 | 31
   1 | 31
   3 | 32
   2 | 32
   1 | 32
   3 | 33
   2 | 33
   1 | 33
(27 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 ORDER BY idv DESC, idi DESC;
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test69
   Backward index only scan of: o_test69_reg1
(2 rows)

SELECT idi, idv FROM o_test69 ORDER BY idv DESC, idi DESC;
 idi | idv 
-----+-----
   3 | 33
   2 | 33
   1 | 33
   3 | 32
   2 | 32
   1 | 32
   3 | 31
   2 | 31
   1 | 31
   3 | 23
   2 | 23
   1 | 23
   3 | 22
   2 | 22
   1 | 22
   3 | 21
   2 | 21
   1 | 21
   3 | 13
   2 | 13
   1 | 13
   3 | 12
   2 | 12
   1 | 12
   3 | 11
   2 | 11
   1 | 11
(27 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2;
      QUERY PLAN      
----------------------
 Seq Scan on o_test69
   Filter: (idi = 2)
(2 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2;
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(9 rows)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: (idv = '22'::text)
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
   3 | 22
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv = '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
(1 row)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv > '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '22';
 idi | idv 
-----+-----
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv < '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv < '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv < '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv >= '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '22';
 idi | idv 
-----+-----
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv <= '22';
                  QUERY PLAN                  
----------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv <= '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv <= '22';
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv >= '12'::text) AND (idv <= '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
   2 | 22
(4 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '12' AND idv <= '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv > '12'::text) AND (idv <= '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '12' AND idv <= '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
   2 | 22
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '12' AND idv < '22';
                             QUERY PLAN                              
---------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv >= '12'::text) AND (idv < '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv >= '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 12
   2 | 13
   2 | 21
(3 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '12' AND idv < '22';
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv > '12'::text) AND (idv < '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv > '12' AND idv < '22';
 idi | idv 
-----+-----
   2 | 13
   2 | 21
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv <= '12' OR idv >= '22') ORDER BY idv;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test69_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv <= '12' OR idv >= '22') ORDER BY idv;
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(7 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' OR idv >= '22') ORDER BY idv;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Filter: (((idv)::text < '12'::text) OR ((idv)::text >= '22'::text))
   Forward index only scan of: o_test69_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' OR idv >= '22') ORDER BY idv;
 idi | idv 
-----+-----
   2 | 11
   2 | 22
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv <= '12' OR idv > '22') ORDER BY idv;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Filter: (((idv)::text <= '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test69_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv <= '12' OR idv > '22') ORDER BY idv;
 idi | idv 
-----+-----
   2 | 11
   2 | 12
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(6 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' OR idv > '22') ORDER BY idv;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Filter: (((idv)::text < '12'::text) OR ((idv)::text > '22'::text))
   Forward index only scan of: o_test69_reg1
   Conds: (idi = 2)
(4 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' OR idv > '22') ORDER BY idv;
 idi | idv 
-----+-----
   2 | 11
   2 | 23
   2 | 31
   2 | 32
   2 | 33
(5 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' AND idv > '22') ORDER BY idv;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv < '12'::text) AND (idv > '22'::text) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND (idv < '12' AND idv > '22') ORDER BY idv;
 idi | idv 
-----+-----
(0 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv IN ('12', '22');
                        QUERY PLAN                        
----------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv = ANY ('{12,22}'::text[])) AND (idi = 2))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi = 2 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi IN (2, 4) AND idv IN ('12', '22');
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Filter: (idi = ANY ('{2,4}'::integer[]))
   Forward index only scan of: o_test69_reg1
   Conds: (idv = ANY ('{12,22}'::text[]))
(4 rows)

SELECT idi, idv FROM o_test69 WHERE idi IN (2, 4) AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   2 | 22
(2 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Seq Scan on o_test69
   Filter: (((idi = 2) AND ((idv)::text = '12'::text)) OR ((idi = 4) AND ((idv)::text = '2_3'::text)))
(2 rows)

SELECT idi, idv FROM o_test69 WHERE (idi = 2 AND idv = '12') OR (idi = 4 AND idv = '2_3');
 idi | idv 
-----+-----
   2 | 12
(1 row)

SET enable_seqscan = off;
EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi > 1 AND
														idi < 100 AND
														idv < '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv < '22'::text) AND (idi > 1) AND (idi < 100))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idv < '22';
 idi | idv 
-----+-----
   2 | 11
   3 | 11
   2 | 12
   3 | 12
   2 | 13
   3 | 13
   2 | 21
   3 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi > 1 AND
														idi < 100 AND
														idv > '22';
                         QUERY PLAN                          
-------------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv > '22'::text) AND (idi > 1) AND (idi < 100))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idi < 100 AND idv > '22';
 idi | idv 
-----+-----
   2 | 23
   3 | 23
   2 | 31
   3 | 31
   2 | 32
   3 | 32
   2 | 33
   3 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv = '22'::text) AND (idi > 1))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idi < 100 AND idv = '22';
 idi | idv 
-----+-----
   2 | 22
   3 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi < 3 AND
														idi > 0 AND
														idv < '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv < '22'::text) AND (idi < 3) AND (idi > 0))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi < 3 AND idi > 0 AND idv < '22';
 idi | idv 
-----+-----
   1 | 11
   2 | 11
   1 | 12
   2 | 12
   1 | 13
   2 | 13
   1 | 21
   2 | 21
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi < 3 AND
														idi > 0 AND
														idv > '22';
                        QUERY PLAN                         
-----------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv > '22'::text) AND (idi < 3) AND (idi > 0))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi < 3 AND idi > 0 AND idv > '22';
 idi | idv 
-----+-----
   1 | 23
   2 | 23
   1 | 31
   2 | 31
   1 | 32
   2 | 32
   1 | 33
   2 | 33
(8 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi < 3 AND idv = '22';
                 QUERY PLAN                  
---------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv = '22'::text) AND (idi < 3))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi < 3 AND idv = '22';
 idi | idv 
-----+-----
   1 | 22
   2 | 22
(2 rows)

EXPLAIN (COSTS off) SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idv IN ('12', '22');
                        QUERY PLAN                        
----------------------------------------------------------
 Custom Scan (o_scan) on o_test69
   Forward index only scan of: o_test69_reg1
   Conds: ((idv = ANY ('{12,22}'::text[])) AND (idi > 1))
(3 rows)

SELECT idi, idv FROM o_test69 WHERE idi > 1 AND idv IN ('12', '22');
 idi | idv 
-----+-----
   2 | 12
   3 | 12
   2 | 22
   3 | 22
(4 rows)

RESET enable_seqscan;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test69.idi) AND ((test66.idv)::text = (o_test69.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test69
(5 rows)

SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Join
   Hash Cond: ((test66.idi = o_test69.idi) AND ((test66.idv)::text = (o_test69.idv)::text))
   ->  Seq Scan on test66
   ->  Hash
         ->  Seq Scan on o_test69
(5 rows)

SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_hashjoin=off;
EXPLAIN (COSTS off) SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Merge Join
   Merge Cond: ((test66.idi = o_test69.idi) AND ((test66.idv)::text = (o_test69.idv)::text))
   ->  Index Only Scan using test66_pkey on test66
   ->  Sort
         Sort Key: o_test69.idi, o_test69.idv
         ->  Seq Scan on o_test69
(6 rows)

SELECT * FROM test66 JOIN o_test69 USING(idi, idv);
 idi | idv | idp 
-----+-----+-----
   1 | 11  | 111
   1 | 12  | 112
   1 | 21  | 121
   1 | 23  | 123
   1 | 32  | 132
   1 | 33  | 133
   2 | 11  | 211
   2 | 12  | 212
   2 | 21  | 221
   2 | 23  | 223
   2 | 32  | 232
   2 | 33  | 233
   3 | 11  | 311
   3 | 12  | 312
   3 | 21  | 321
   3 | 23  | 323
   3 | 32  | 332
   3 | 33  | 333
(18 rows)

set enable_nestloop=on;
set enable_hashjoin=on;
CREATE TABLE o_test70
(
	key int8 not null,
	value int8,
	PRIMARY KEY(key)
) USING orioledb;
CREATE INDEX o_test70_reg ON o_test70(value);
-- Test page split
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(1, 1000, 4) AS i;
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(1000, 1, -4) AS i;
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(999, 1, -4) AS i;
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(998, 1, -4) AS i;
SELECT (SELECT array_agg(key) FROM o_test70) =
       (SELECT array_agg(i)::int8[] FROM generate_series(1, 1000) as i);
 ?column? 
----------
 t
(1 row)

SELECT (SELECT array_agg(value) FROM o_test70) =
       (SELECT array_agg(i+1)::int8[] FROM generate_series(1, 1000) as i);
 ?column? 
----------
 t
(1 row)

SELECT count(*)
	FROM o_test70,
	     (SELECT array_agg(i) as keys FROM generate_series(1, 1000) as i) t
	WHERE key = ANY (keys);
 count 
-------
  1000
(1 row)

TRUNCATE o_test70;
-- Test rollback for upsert
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(1, 20, 1) AS i;
SELECT value FROM o_test70 WHERE key = 1;
 value 
-------
     2
(1 row)

--SELECT orioledb_tbl_structure('o_test70'::regclass);
BEGIN;
UPDATE o_test70 SET value = value + 2 WHERE key = 1;
--SELECT orioledb_tbl_structure('o_test70'::regclass);
ROLLBACK;
--SELECT orioledb_tbl_structure('o_test70'::regclass);
SELECT value FROM o_test70 WHERE key = 1;
 value 
-------
     2
(1 row)

BEGIN;
UPDATE o_test70 SET value = value + 2 WHERE key = 1;
UPDATE o_test70 SET value = value + 2 WHERE key = 1;
--SELECT orioledb_tbl_structure('o_test70'::regclass);
ROLLBACK;
--SELECT orioledb_tbl_structure('o_test70'::regclass);
SELECT value FROM o_test70 WHERE key = 1;
 value 
-------
     2
(1 row)

-- Test for key update
UPDATE o_test70 SET key = 1001 WHERE key = 1;
SELECT key, value FROM o_test70 WHERE key = 1 OR key = 1001;
 key  | value 
------+-------
 1001 |     2
(1 row)

--SELECT orioledb_tbl_structure('o_test70'::regclass);
-- Test split bug
TRUNCATE o_test70;
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(1, 100, 4) AS i;
DELETE FROM o_test70 WHERE key % 4 = 1;
INSERT INTO o_test70 SELECT i, i + 1 FROM generate_series(2, 100, 4) AS i;
SELECT sum(key), sum(value), count(*) FROM o_test70;
 sum  | sum  | count 
------+------+-------
 1250 | 1275 |    25
(1 row)

--SELECT orioledb_tbl_structure('o_test70'::regclass);
TRUNCATE o_test70;
CREATE TABLE o_test71
(
	idf varchar NOT NULL,
	ids int4 NOT NULL,
	idt int4 NOT NULL,
	PRIMARY KEY (ids, idt)
) USING orioledb;
CREATE UNIQUE INDEX o_test71_uniq ON o_test71 (idf, idt);
SELECT orioledb_tbl_indices('o_test71'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test71_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 2+
     Non-leaf tuple fields: ids, idt           +
 Index o_test71_uniq                           +
     Index type: secondary, unique             +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: idf, idt, ids      +
     Leaf tuple fields: idf, idt, ids          +
 
(1 row)

INSERT INTO o_test71 VALUES (1, 2, 3);
SELECT * FROM o_test71 WHERE idf = '1';
 idf | ids | idt 
-----+-----+-----
 1   |   2 |   3
(1 row)

UPDATE o_test71 SET ids = 4 WHERE idf = '1';
SELECT * FROM o_test71;
 idf | ids | idt 
-----+-----+-----
 1   |   4 |   3
(1 row)

SELECT * FROM o_test71 WHERE idf >= '1';
 idf | ids | idt 
-----+-----+-----
 1   |   4 |   3
(1 row)

-- compressed index
CREATE TABLE o_test72
(
	key int8 NOT NULL,
	value int8 NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test72_uniq ON o_test72(value) WITH (compress);
SELECT orioledb_tbl_indices('o_test72'::regclass);
                orioledb_tbl_indices                 
-----------------------------------------------------
 Index ctid_primary                                 +
     Index type: primary, unique, ctid              +
     Leaf tuple size: 3, non-leaf tuple size: 1     +
     Non-leaf tuple fields: ctid                    +
 Index o_test72_uniq                                +
     Index type: secondary, unique, compression = 10+
     Leaf tuple size: 2, non-leaf tuple size: 2     +
     Non-leaf tuple fields: value, ctid             +
     Leaf tuple fields: value, ctid                 +
 
(1 row)

TRUNCATE o_test72;
-- compressed index with invalid compression lvl
CREATE TABLE o_test73
(
	key int8 NOT NULL,
	value int8 NOT NULL
) USING orioledb;
CREATE UNIQUE INDEX o_test73_uniq ON o_test73(value) WITH (compress = -50);
ERROR:  Index compression level must be between -1 and 22
CREATE UNIQUE INDEX o_test73_uniq ON o_test73(value) WITH (compress = 500);
ERROR:  Index compression level must be between -1 and 22
-- compressed index with valid compression lvl
CREATE UNIQUE INDEX o_test73_uniq ON o_test73(value) WITH (compress = 11);
SELECT orioledb_tbl_indices('o_test73'::regclass);
                orioledb_tbl_indices                 
-----------------------------------------------------
 Index ctid_primary                                 +
     Index type: primary, unique, ctid              +
     Leaf tuple size: 3, non-leaf tuple size: 1     +
     Non-leaf tuple fields: ctid                    +
 Index o_test73_uniq                                +
     Index type: secondary, unique, compression = 11+
     Leaf tuple size: 2, non-leaf tuple size: 2     +
     Non-leaf tuple fields: value, ctid             +
     Leaf tuple fields: value, ctid                 +
 
(1 row)

TRUNCATE o_test73;
-- invalid toast compression
CREATE TABLE o_test74
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY(key)
) USING orioledb WITH (toast_compress = -10);
ERROR:  TOAST compression level must be between -1 and 22
CREATE TABLE o_test74
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY(key)
) USING orioledb WITH (toast_compress = 1000);
ERROR:  TOAST compression level must be between -1 and 22
-- valid default toast compression
CREATE TABLE o_test74
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY(key)
) USING orioledb WITH (toast_compress);
SELECT orioledb_tbl_indices('o_test74'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test74_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 
(1 row)

-- a valid toast compression
CREATE TABLE o_test75
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY(key)
) USING orioledb WITH (toast_compress = 11);
SELECT orioledb_tbl_indices('o_test75'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test75_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 
(1 row)

-- a valid default compression
CREATE TABLE o_test76
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY(key)
) USING orioledb WITH (compress = 9);
CREATE UNIQUE INDEX o_test76_uniq ON o_test76 (key) WITH (compress);
SELECT orioledb_tbl_indices('o_test76'::regclass);
                orioledb_tbl_indices                 
-----------------------------------------------------
 Index o_test76_pkey                                +
     Index type: primary, unique, compression = 9   +
     Leaf tuple size: 2, non-leaf tuple size: 1     +
     Non-leaf tuple fields: key                     +
 Index o_test76_uniq                                +
     Index type: secondary, unique, compression = 10+
     Leaf tuple size: 1, non-leaf tuple size: 1     +
     Non-leaf tuple fields: key                     +
     Leaf tuple fields: key                         +
 
(1 row)

-- a valid default compression
CREATE TABLE o_test77
(
	key int8 NOT NULL,
	value text NOT NULL
) USING orioledb WITH (compress = 9);
CREATE INDEX o_test77_reg1 ON o_test77 (key);
CREATE INDEX o_test77_reg2 ON o_test77 (key);
SELECT orioledb_tbl_indices('o_test77'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index ctid_primary                                    +
     Index type: primary, unique, compression = 9, ctid+
     Leaf tuple size: 3, non-leaf tuple size: 1        +
     Non-leaf tuple fields: ctid                       +
 Index o_test77_reg1                                   +
     Index type: secondary, compression = 9            +
     Leaf tuple size: 2, non-leaf tuple size: 2        +
     Non-leaf tuple fields: key, ctid                  +
     Leaf tuple fields: key, ctid                      +
 Index o_test77_reg2                                   +
     Index type: secondary, compression = 9            +
     Leaf tuple size: 2, non-leaf tuple size: 2        +
     Non-leaf tuple fields: key, ctid                  +
     Leaf tuple fields: key, ctid                      +
 
(1 row)

-- valid ctid compression
CREATE TABLE o_test78
(
	key int8 NOT NULL,
	value text NOT NULL
) USING orioledb WITH (primary_compress = 12);
CREATE INDEX o_test78_reg ON o_test78 (key);
SELECT orioledb_tbl_indices('o_test78'::regclass);
                  orioledb_tbl_indices                   
---------------------------------------------------------
 Index ctid_primary                                     +
     Index type: primary, unique, compression = 12, ctid+
     Leaf tuple size: 3, non-leaf tuple size: 1         +
     Non-leaf tuple fields: ctid                        +
 Index o_test78_reg                                     +
     Index type: secondary                              +
     Leaf tuple size: 2, non-leaf tuple size: 2         +
     Non-leaf tuple fields: key, ctid                   +
     Leaf tuple fields: key, ctid                       +
 
(1 row)

-- valid ctid compression
CREATE TABLE o_test79
(
	key int8 NOT NULL,
	value text NOT NULL
) USING orioledb WITH (primary_compress = 7);
SELECT orioledb_tbl_indices('o_test79'::regclass);
                  orioledb_tbl_indices                  
--------------------------------------------------------
 Index ctid_primary                                    +
     Index type: primary, unique, compression = 7, ctid+
     Leaf tuple size: 3, non-leaf tuple size: 1        +
     Non-leaf tuple fields: ctid                       +
 
(1 row)

--- array index
CREATE TABLE o_test80
(
	arr integer[] NOT NULL,
	PRIMARY KEY (arr)
) USING orioledb;
BEGIN;
INSERT INTO o_test80 VALUES ('{1, 2}');
COMMIT;
INSERT INTO o_test80 VALUES ('{2, 3, 4}');
SELECT * FROM o_test80;
   arr   
---------
 {1,2}
 {2,3,4}
(2 rows)

DROP TABLE o_test80;
-- disable compression value
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value text NOT NULL
) USING orioledb WITH (primary_compress = -1);
SELECT orioledb_tbl_indices('o_test81'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 
(1 row)

DROP TABLE o_test81;
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value text NOT NULL
) USING orioledb WITH (compress = -1);
SELECT orioledb_tbl_indices('o_test81'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index ctid_primary                            +
     Index type: primary, unique, ctid         +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: ctid               +
 
(1 row)

DROP TABLE o_test81;
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value text NOT NULL,
	PRIMARY KEY (key)
) USING orioledb WITH (toast_compress = -1);
SELECT orioledb_tbl_indices('o_test81'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test81_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 
(1 row)

DROP TABLE o_test81;
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY (value)
) USING orioledb WITH (compress = -1);
SELECT orioledb_tbl_indices('o_test81'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test81_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: value              +
 
(1 row)

DROP TABLE o_test81;
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY(value)
) USING orioledb WITH (compress = -1);
SELECT orioledb_tbl_indices('o_test81'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test81_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 2, non-leaf tuple size: 1+
     Non-leaf tuple fields: value              +
 
(1 row)

DROP TABLE o_test81;
SET orioledb.default_compress = 5;
SET orioledb.default_primary_compress = 6;
SET orioledb.default_toast_compress = 7;
CREATE TABLE o_test81
(
	key int8 NOT NULL,
	value int8 NOT NULL,
	PRIMARY KEY (value)
) USING orioledb WITH (compress = -1);
SELECT orioledb_table_description('o_test81'::regclass);
               orioledb_table_description                
---------------------------------------------------------
 Compress = -1, Primary compress = 6, TOAST compress = 7+
  Column |   Type | Collation | Nullable | Droped       +
     key | bigint |    (null) |    false |  false       +
   value | bigint |    (null) |    false |  false       +
 
(1 row)

SELECT orioledb_tbl_indices('o_test81'::regclass);
               orioledb_tbl_indices               
--------------------------------------------------
 Index o_test81_pkey                             +
     Index type: primary, unique, compression = 6+
     Leaf tuple size: 2, non-leaf tuple size: 1  +
     Non-leaf tuple fields: value                +
 
(1 row)

DROP TABLE o_test81;
RESET orioledb.default_compress;
RESET orioledb.default_primary_compress;
RESET orioledb.default_toast_compress;
-- Index rename
CREATE TABLE o_test82
(
	key bigint NOT NULL,
	val int,
	val2 int NOT NULL,
	PRIMARY KEY (key)
) USING orioledb;
CREATE INDEX o_test82_idx1 ON o_test82 (val);
INSERT INTO o_test82 SELECT 1000 + i, 3000 + i, 3000 + i FROM generate_series(1, 500) AS i;
CREATE INDEX o_test82_idx2 ON o_test82 (val2);
SELECT orioledb_tbl_indices('o_test82'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test82_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test82_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 Index o_test82_idx2                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val2, key          +
     Leaf tuple fields: val2, key              +
 
(1 row)

SET enable_seqscan = off;
SET enable_bitmapscan = off;
SELECT smart_explain(
'EXPLAIN (COSTS off) WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;');
                smart_explain                 
----------------------------------------------
 Aggregate
   ->  Custom Scan (o_scan) on o_test82
         Filter: (val > 0)
         Forward index scan of: o_test82_idx2
         Conds: (val2 > 0)
(5 rows)

WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;
 count 
-------
   500
(1 row)

BEGIN;
ALTER INDEX o_test82_idx2 RENAME TO o_test82_idx2_renamed;
ROLLBACK;
SELECT orioledb_tbl_indices('o_test82'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test82_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test82_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 Index o_test82_idx2                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val2, key          +
     Leaf tuple fields: val2, key              +
 
(1 row)

SELECT smart_explain(
'EXPLAIN (COSTS off) WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;');
                smart_explain                 
----------------------------------------------
 Aggregate
   ->  Custom Scan (o_scan) on o_test82
         Filter: (val > 0)
         Forward index scan of: o_test82_idx2
         Conds: (val2 > 0)
(5 rows)

WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;
 count 
-------
   500
(1 row)

ALTER INDEX o_test82_idx2 RENAME TO o_test82_idx2_renamed;
SELECT orioledb_tbl_indices('o_test82'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test82_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test82_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 Index o_test82_idx2_renamed                   +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val2, key          +
     Leaf tuple fields: val2, key              +
 
(1 row)

SELECT smart_explain(
'EXPLAIN (COSTS off) WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;');
                    smart_explain                     
------------------------------------------------------
 Aggregate
   ->  Custom Scan (o_scan) on o_test82
         Filter: (val > 0)
         Forward index scan of: o_test82_idx2_renamed
         Conds: (val2 > 0)
(5 rows)

WITH o_test82_all AS (
    SELECT * FROM o_test82
		WHERE val2 > 0 AND val > 0
		ORDER BY val2
) SELECT COUNT(*) FROM o_test82_all;
 count 
-------
   500
(1 row)

RESET enable_seqscan;
RESET enable_bitmapscan;
DROP INDEX o_test82_idx2; -- fail
ERROR:  index "o_test82_idx2" does not exist
DROP INDEX o_test82_idx2_renamed; -- success
SELECT orioledb_tbl_indices('o_test82'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test82_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test82_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 
(1 row)

-- Column rename
CREATE TABLE o_test83
(
	key bigint NOT NULL,
	val int,
	val2 int NOT NULL,
	PRIMARY KEY (key)
) USING orioledb;
CREATE INDEX o_test83_idx1 ON o_test83 (val, val2);
BEGIN;
ALTER TABLE o_test83
RENAME COLUMN val TO vala;
ROLLBACK;
SELECT orioledb_table_description('o_test83'::regclass);
                orioledb_table_description                 
-----------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1+
  Column |    Type | Collation | Nullable | Droped        +
     key |  bigint |    (null) |    false |  false        +
     val | integer |    (null) |     true |  false        +
    val2 | integer |    (null) |    false |  false        +
 
(1 row)

SELECT orioledb_tbl_indices('o_test83'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test83_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test83_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: val, val2, key     +
     Leaf tuple fields: val, val2, key         +
 
(1 row)

ALTER TABLE o_test83
RENAME COLUMN val TO vala;
SELECT orioledb_table_description('o_test83'::regclass);
                orioledb_table_description                 
-----------------------------------------------------------
 Compress = -1, Primary compress = -1, TOAST compress = -1+
  Column |    Type | Collation | Nullable | Droped        +
     key |  bigint |    (null) |    false |  false        +
    vala | integer |    (null) |     true |  false        +
    val2 | integer |    (null) |    false |  false        +
 
(1 row)

SELECT orioledb_tbl_indices('o_test83'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test83_pkey                           +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 1+
     Non-leaf tuple fields: key                +
 Index o_test83_idx1                           +
     Index type: secondary                     +
     Leaf tuple size: 3, non-leaf tuple size: 3+
     Non-leaf tuple fields: vala, val2, key    +
     Leaf tuple fields: vala, val2, key        +
 
(1 row)

-- Check that partial indices also updated
CREATE TABLE o_test_partial_idx_update
(
  id bigint NOT NULL,
  user_id bigint,
  am bigint,
  CONSTRAINT o_test_partial_idx_update_pkey PRIMARY KEY (id),
  CONSTRAINT o_test_partial_idx_update_amount_check CHECK (am >= 0)
) USING orioledb;
CREATE INDEX o_test_partial_idx_update_idx1
	ON o_test_partial_idx_update (user_id, am);
CREATE INDEX o_test_partial_idx_update_idx2
	ON o_test_partial_idx_update (user_id) WHERE am > 0;
INSERT INTO o_test_partial_idx_update VALUES (1, 100500, 100);
SELECT * FROM o_test_partial_idx_update;
 id | user_id | am  
----+---------+-----
  1 |  100500 | 100
(1 row)

SELECT * FROM o_test_partial_idx_update WHERE user_id=100500 and am > 0;
 id | user_id | am  
----+---------+-----
  1 |  100500 | 100
(1 row)

UPDATE o_test_partial_idx_update SET am=0 WHERE user_id=100500;
SELECT * FROM o_test_partial_idx_update;
 id | user_id | am 
----+---------+----
  1 |  100500 |  0
(1 row)

EXPLAIN SELECT * FROM o_test_partial_idx_update
	WHERE user_id=100500 and am > 0;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_partial_idx_update  (cost=4.13..9.48 rows=2 width=24)
   Bitmap heap scan
   Recheck Cond: ((user_id = 100500) AND (am > 0))
   ->  Bitmap Index Scan on o_test_partial_idx_update_idx2  (cost=0.00..4.13 rows=2 width=0)
         Index Cond: (user_id = 100500)
(5 rows)

SELECT * FROM o_test_partial_idx_update WHERE user_id=100500 and am > 0;
 id | user_id | am 
----+---------+----
(0 rows)

SET enable_bitmapscan = off;
EXPLAIN SELECT * FROM o_test_partial_idx_update
	WHERE user_id=100500 and am > 0;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_partial_idx_update  (cost=0.12..12.15 rows=2 width=24)
   Forward index scan of: o_test_partial_idx_update_idx2
   Conds: (user_id = 100500)
(3 rows)

SELECT * FROM o_test_partial_idx_update WHERE user_id=100500 and am > 0;
 id | user_id | am 
----+---------+----
(0 rows)

SET enable_bitmapscan = on;
CREATE TABLE o_test_nulls
(
  id bigint NOT NULL,
  value bigint,
  PRIMARY KEY (id)
) USING orioledb;
INSERT INTO o_test_nulls (SELECT i, i FROM generate_series(1,10000) i);
INSERT INTO o_test_nulls (SELECT i, NULL FROM generate_series(10001,11000) i);
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value ASC NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value ASC NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value DESC NULLS FIRST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
CREATE INDEX o_test_nulls_value_idx ON o_test_nulls(value DESC NULLS LAST);
SELECT count(*) FROM o_test_nulls WHERE value IS NULL;
 count 
-------
  1000
(1 row)

SELECT count(*) FROM o_test_nulls WHERE value IS NOT NULL;
 count 
-------
 10000
(1 row)

DROP INDEX o_test_nulls_value_idx;
DROP TABLE o_test_nulls CASCADE;
-- Check that build of index with same fields as pkey succeeds
SET enable_seqscan = off;
CREATE TABLE IF NOT EXISTS o_test_unique_as_pkey (
	key integer NOT NULL,
	val integer NOT NULL,
	val2 integer NOT NULL,
	PRIMARY KEY(key, val)
) USING orioledb;
CREATE UNIQUE INDEX o_test_unique_as_pkey_ix1
	ON o_test_unique_as_pkey (val, key);
INSERT INTO o_test_unique_as_pkey (key, val, val2)
	(SELECT val, val * 100, val * 1000  FROM generate_series(1, 5) val);
\d+ o_test_unique_as_pkey
                           Table "public.o_test_unique_as_pkey"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 key    | integer |           | not null |         | plain   |              | 
 val    | integer |           | not null |         | plain   |              | 
 val2   | integer |           | not null |         | plain   |              | 
Indexes:
    "o_test_unique_as_pkey_pkey" PRIMARY KEY, btree (key, val)
    "o_test_unique_as_pkey_ix1" UNIQUE, btree (val, key) INCLUDE (key, val)

SELECT orioledb_tbl_indices('o_test_unique_as_pkey'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_unique_as_pkey_pkey              +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, val           +
 Index o_test_unique_as_pkey_ix1               +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 
(1 row)

EXPLAIN SELECT * FROM o_test_unique_as_pkey ORDER BY val;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_unique_as_pkey  (cost=0.15..74.87 rows=2048 width=12)
   Forward index scan of: o_test_unique_as_pkey_ix1
(2 rows)

SELECT * FROM o_test_unique_as_pkey ORDER BY val;
 key | val | val2 
-----+-----+------
   1 | 100 | 1000
   2 | 200 | 2000
   3 | 300 | 3000
   4 | 400 | 4000
   5 | 500 | 5000
(5 rows)

CREATE UNIQUE INDEX o_test_unique_as_pkey_ix2
	ON o_test_unique_as_pkey (val, key);
\d+ o_test_unique_as_pkey
                           Table "public.o_test_unique_as_pkey"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 key    | integer |           | not null |         | plain   |              | 
 val    | integer |           | not null |         | plain   |              | 
 val2   | integer |           | not null |         | plain   |              | 
Indexes:
    "o_test_unique_as_pkey_pkey" PRIMARY KEY, btree (key, val)
    "o_test_unique_as_pkey_ix1" UNIQUE, btree (val, key) INCLUDE (key, val)
    "o_test_unique_as_pkey_ix2" UNIQUE, btree (val, key) INCLUDE (key, val)

SELECT orioledb_tbl_indices('o_test_unique_as_pkey'::regclass);
              orioledb_tbl_indices              
------------------------------------------------
 Index o_test_unique_as_pkey_pkey              +
     Index type: primary, unique               +
     Leaf tuple size: 3, non-leaf tuple size: 2+
     Non-leaf tuple fields: key, val           +
 Index o_test_unique_as_pkey_ix1               +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 Index o_test_unique_as_pkey_ix2               +
     Index type: secondary, unique             +
     Leaf tuple size: 2, non-leaf tuple size: 2+
     Non-leaf tuple fields: val, key           +
     Leaf tuple fields: val, key               +
 
(1 row)

EXPLAIN SELECT * FROM o_test_unique_as_pkey ORDER BY val;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Custom Scan (o_scan) on o_test_unique_as_pkey  (cost=0.13..8.21 rows=5 width=12)
   Forward index scan of: o_test_unique_as_pkey_ix2
(2 rows)

SELECT * FROM o_test_unique_as_pkey ORDER BY val;
 key | val | val2 
-----+-----+------
   1 | 100 | 1000
   2 | 200 | 2000
   3 | 300 | 3000
   4 | 400 | 4000
   5 | 500 | 5000
(5 rows)

RESET enable_seqscan;
DROP EXTENSION orioledb CASCADE;
NOTICE:  drop cascades to 30 other objects
DETAIL:  drop cascades to table o_test50
drop cascades to table o_test51
drop cascades to table o_test52
drop cascades to table o_test53
drop cascades to table o_test54
drop cascades to table o_test55
drop cascades to table o_test56
drop cascades to table o_test57
drop cascades to table o_test58
drop cascades to table o_test59
drop cascades to table o_test61
drop cascades to table o_test65
drop cascades to table o_test66
drop cascades to table o_test67
drop cascades to table o_test68
drop cascades to table o_test69
drop cascades to table o_test70
drop cascades to table o_test71
drop cascades to table o_test72
drop cascades to table o_test73
drop cascades to table o_test74
drop cascades to table o_test75
drop cascades to table o_test76
drop cascades to table o_test77
drop cascades to table o_test78
drop cascades to table o_test79
drop cascades to table o_test82
drop cascades to table o_test83
drop cascades to table o_test_partial_idx_update
drop cascades to table o_test_unique_as_pkey
